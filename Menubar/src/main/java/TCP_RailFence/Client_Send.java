/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package TCP_RailFence;

import javax.swing.*;
import javax.xml.crypto.Data;

import java.io.*;
import java.net.Socket;
/**
 *
 * @author APC
 */
public class Client_Send extends javax.swing.JFrame {

    /**
     * Creates new form Client_Send
     */
    static File[] filetosend = new File[1];
    static Socket socket;
    static InputStream data_input;
    static DataOutputStream file_output;

    public Client_Send() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jB_ChooseFile = new javax.swing.JButton();
        jB_SendFile = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jText_FileName = new javax.swing.JTextField();
        jL_warning = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Send File to Server");

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Send to Server");

        jB_ChooseFile.setText("Choose a file to send");
        jB_ChooseFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_ChooseFileActionPerformed(evt);
            }
        });

        jB_SendFile.setText("Send File");
        jB_SendFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_SendFileActionPerformed(evt);
            }
        });

        jText_FileName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jText_FileNameActionPerformed(evt);
            }
        });

        jL_warning.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jLabel2.setText("File Name:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jText_FileName, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                                .addComponent(jB_ChooseFile))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(72, 72, 72)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jB_SendFile, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jL_warning, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(57, 57, 57))
            .addGroup(layout.createSequentialGroup()
                .addGap(178, 178, 178)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jText_FileName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jB_ChooseFile))
                .addGap(18, 18, 18)
                .addComponent(jL_warning, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jB_SendFile, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(116, 116, 116))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jB_ChooseFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_ChooseFileActionPerformed
        
        JFileChooser filechooser = new JFileChooser();
        filechooser.setDialogTitle("Choose a file to send");
        
        if(filechooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION){
            filetosend[0] = filechooser.getSelectedFile();
            jText_FileName.setText(filetosend[0].getName());
        }else{
            jText_FileName.setText("");
        }
        
    }//GEN-LAST:event_jB_ChooseFileActionPerformed

    private void jText_FileNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jText_FileNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jText_FileNameActionPerformed

    private void jB_SendFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_SendFileActionPerformed
        // TODO add your handling code here:
       if(filetosend[0] == null){
        jL_warning.setText("You need to choose a file to send first");
       }else{
        jL_warning.setText("");
        try{
            FileInputStream fileinput = new FileInputStream(filetosend[0].getAbsolutePath());
            DataOutputStream dataOutputStream = new DataOutputStream(socket.getOutputStream());
            String filename = filetosend[0].getName();
            byte[] filenameByte = filename.getBytes();

            byte[] fileContentByte = new byte[(int) filetosend[0].length()];
            fileinput.read(fileContentByte);

            dataOutputStream.writeInt(filenameByte.length);
            dataOutputStream.write(filenameByte);
            
            dataOutputStream.writeInt(fileContentByte.length);
            dataOutputStream.write(fileContentByte);

            // byte[] bytearray = new byte[1024];
            // FileOutputStream file = new FileOutputStream(filetosend[0].getAbsolutePath());
            // file_output = new FileOutputStream(file);
            // int byteRead = 

            

            
        }catch(IOException e){
            e.printStackTrace();
        }

       }
    }//GEN-LAST:event_jB_SendFileActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Client_Send.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Client_Send.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Client_Send.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Client_Send.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Client_Send().setVisible(true);
            }
        });
        try {
            socket = new Socket("localhost",5000);
            data_input = new DataInputStream(socket.getInputStream());
            file_output = new DataOutputStream(socket.getOutputStream());
            
        } catch (IOException e) {
            // TODO: handle exception
            e.printStackTrace();
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jB_ChooseFile;
    private javax.swing.JButton jB_SendFile;
    private javax.swing.JLabel jL_warning;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField jText_FileName;
    // End of variables declaration//GEN-END:variables
}
